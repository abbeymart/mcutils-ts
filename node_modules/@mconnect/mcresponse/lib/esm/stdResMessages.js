"use strict";
/**
 * @Author: abbeymart | Abi Akindele | @Created: 2020-07-11
 * @Company: Copyright 2020 Abi Akindele  | mConnect.biz
 * @License: All Rights Reserved | LICENSE.md
 * @Description: @mconnect/res-messages, response-messages | settings, default values
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.stdResMessages = void 0;
const netStatusCode_1 = require("./netStatusCode");
// message options => code, resCode, reMessage, message, value
exports.stdResMessages = {
    paramsError: {
        code: "paramsError",
        resCode: netStatusCode_1.Status.NotAcceptable,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotAcceptable) || "Not Acceptable",
        message: "Parameters checking error",
        value: "",
    },
    checkError: {
        code: "paramsError",
        resCode: netStatusCode_1.Status.NotAcceptable,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotAcceptable) || "Not Acceptable",
        message: "Parameters checking error",
        value: "",
    },
    connectError: {
        code: "connectionError",
        resCode: netStatusCode_1.Status.NetworkAuthenticationRequired,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NetworkAuthenticationRequired) || "Network Auth Required",
        message: "Connection error",
        value: "",
    },
    validateError: {
        code: "paramsError",
        resCode: netStatusCode_1.Status.NotAcceptable,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotAcceptable) || "Not Acceptable",
        message: "Validation error for inputs parameters",
        value: "",
    },
    tokenExpired: {
        code: "tokenExpired",
        resCode: netStatusCode_1.Status.Unauthorized,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.Unauthorized) || "Not Authorized",
        message: "Unauthorized. Token / Access-key has expired. Please login again",
        value: "",
    },
    unAuthorized: {
        code: "unAuthorized",
        resCode: netStatusCode_1.Status.Unauthorized,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.Unauthorized) || "Not Authorized",
        message: "Unauthorised Action or Task",
        value: "",
    },
    notFound: {
        code: "notFound",
        resCode: netStatusCode_1.Status.NotFound,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotFound) || "Not Found",
        message: "Requested information not found",
        value: "",
    },
    success: {
        code: "success",
        resCode: netStatusCode_1.Status.OK,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.OK) || "OK",
        message: "Request completed successfully",
        value: "",
    },
    removeDenied: {
        code: "removeDenied",
        resCode: netStatusCode_1.Status.Unauthorized,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.Unauthorized) || "Not Authorized",
        message: "Remove action/task denied/unauthorised",
        value: "",
    },
    removeError: {
        code: "removeError",
        resCode: netStatusCode_1.Status.NotModified,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotModified) || "Not Modified",
        message: "Error removing/deleting information, retry or contact system-admin",
        value: "",
    },
    removed: {
        code: "removed",
        resCode: netStatusCode_1.Status.OK,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.OK) || "OK",
        message: "Record(s) deleted/removed successfully",
        value: "",
    },
    subItems: {
        code: "subItems",
        resCode: netStatusCode_1.Status.NotModified,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotModified) || "Not Modified",
        message: "Record includes sub-items, which must be removed first",
        value: "",
    },
    duplicateRec: {
        code: "duplicate",
        resCode: netStatusCode_1.Status.NotModified,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotModified) || "Not Modified",
        message: "Duplicate record exists",
        value: "",
    },
    updated: {
        code: "updated",
        resCode: netStatusCode_1.Status.OK,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.OK) || "OK",
        message: "Information update action completed successfully",
        value: "",
    },
    updateError: {
        code: "updateError",
        resCode: netStatusCode_1.Status.NotModified,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotModified) || "Not Modified",
        message: "Error updating information/record(s)",
        value: "",
    },
    updateDenied: {
        code: "updateDenied",
        resCode: netStatusCode_1.Status.Unauthorized,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.Unauthorized) || "Not Authorized",
        message: "Update action/task not authorised",
        value: "",
    },
    inserted: {
        code: "inserted",
        resCode: netStatusCode_1.Status.OK,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.OK) || "OK",
        message: "Information/record(s) inserted/created successfully",
        value: "",
    },
    insertError: {
        code: "insertError",
        resCode: netStatusCode_1.Status.NotModified,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotModified) || "Not Modified",
        message: "Error inserting/creating new information/record",
        value: "",
    },
    recExist: {
        code: "exists",
        resCode: netStatusCode_1.Status.NotModified,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.NotModified) || "Not Modified",
        message: "Document/record exists",
        value: "",
    },
    unknown: {
        code: "unknown",
        resCode: netStatusCode_1.Status.UnprocessableEntity,
        resMessage: netStatusCode_1.StatusText.get(netStatusCode_1.Status.UnprocessableEntity) || "Not Processed",
        message: "Unspecified response/error message",
        value: "",
    },
};
//# sourceMappingURL=stdResMessages.js.map